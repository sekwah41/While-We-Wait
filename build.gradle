plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id 'net.researchgate.release' version '2.8.1'
}

def branch = System.getenv("GITHUB_REF")
if(branch != null) {
	branch = branch.replace('refs/heads/', '')
}
def isCanary = version.toString().contains('canary')

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
group = project.maven_group

minecraft {
}

repositories {
	maven {
		name = "FabricMC"
		url = "https://maven.fabricmc.net"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}


tasks.curseforge.enabled = System.getenv("CURSE_API") != null

curseforge {
	logger.info("Curse api: " + System.getenv("CURSE_API"))
	if (System.getenv("CURSE_API") != null) {
		apiKey = System.getenv("CURSE_API")
	}
	project {
		id = project.curse_project_id
		// TODO add code to reference this but also cut the latest change logs in for the files
		changelog = "${project.github}/blob/${branch}/CHANGELOG.md"
		changelogType = 'markdown'
		releaseType = 'release'
		addGameVersion '1.17.1'

		mainArtifact(jar){

		}
		//addArtifact srcJar
	}
}

// https://github.com/researchgate/gradle-release
// Only other plugin I can find using auto & gradle https://github.com/intuit/hooks
release {
	failOnPublishNeeded = false
	failOnSnapshotDependencies = false
	git {
		requireBranch = ''
	}


	// Disable tasks because something we have is causing -x to be ignored
	createReleaseTag.enabled = false
	preTagCommit.enabled = false
	commitNewVersion.enabled = false
}

task publish {
	doLast {
		println "This is a dummy task to run others for version: ${version}"
	}
}

task cleanbuildfolder {
	doLast {
		println "Cleaning up previous builds (to stop publishing old ones by mistake)"
		project.delete(files("${buildDir}/libs"))
	}
}

compileJava.dependsOn 'cleanbuildfolder'

// Publish rules
// Current behavior seems to be canary or release. Though pre-releases may break this pattern.
publish.dependsOn 'build'
if (!isCanary) {
	publish.finalizedBy 'curseforge'
}
